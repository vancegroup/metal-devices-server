# METaL Devices Server

This is an attempt to package and automate the setup currently used for the metal-devices server. It runs Ubuntu Server x64 11.04, with a Bluetooth adapter to talk to two Wii Remotes, and a 5DT dataglove on both hardware serial ports.

Here, we're assuming that `restartvrpn` is the user created specifically for remote automated control (restarting server processes or the whole machine). You can set it to not have a password (prohibiting direct login).

NOTE: This repository uses git submodules. You'll need to run `git submodule update --init --recursive` to fetch them.

## Build and Install

CMake is used - set `CMAKE_INSTALL_PREFIX` to where you want it to end up. (for instance, `/opt/vrpn` works just dandy. Do a `make install` after configuring.

Then, there are just two things you must do manually:

- Copy the files from `${CMAKE_INSTALL_PREFIX}/upstart/` to `/etc/init` to enable the upstart services
- Copy `${CMAKE_INSTALL_PREFIX}/ssh/authorized_keys` to `/home/restartvrpn/.ssh/` to enable remote control

The scripts in this root directory are intended to help get a system set up to be the target. Once running all the permissions scripts (passing `/opt/vrpn-deploy` to `set_permissions_for_dest.sh`) and setting up the sudoer file as below, you can run a script like `deploy.sh`, which builds in a temporary directory, installs to your desired destination, updates the upstart config files, updates the `authorized_keys` file, then finally restarts all the VRPN servers so that you're using the new build.


## Sudo configuration

The following line needs to be placed in a new file with a command like `sudo visudo -f /etc/sudoers.d/devices` with mode `0440` (or added to `/etc/sudoers` directly with `visudo`) so that the `restartvrpn` user can control services and restart the machine, and so that your main user (here `metal`) can impersonate the `restartvrpn` user without a password for key installation:

    restartvrpn ALL = NOPASSWD: /usr/sbin/service, /sbin/shutdown
    metal   ALL = (restartvrpn) NOPASSWD: ALL


## Remote control

Windows trigger client based on ssh key identification is in `trigger_client` - but note the private keys are not included in this repo for obvious security reasons.  If you make your own, you'll need to change the lines in `ssh_trigger_scripts/authorized_keys.in` accordingly and re-install.
